
@{
    ViewData["Title"] = "Product";

    ViewBag.HelpTitle = ViewData["Title"];
    ViewBag.HelpMessage1 = "This is the place where you can record all the products related to your business.";
    ViewBag.HelpMessage2 = "";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-tag"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
              
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script id="templateForm" type="text/template">
    <input hidden id="ProductId" name="ProductId" value="{{:ProductId}}" />
    <input hidden id="ProductImageUrl" name="ProductImageUrl" value="{{:ProductImageUrl}}" />
    <table cellspacing="10">
        <tr>
            <td>
                Product Name
            </td>
            <td colspan="3">
                <input id="ProductName" name="ProductName" value="{{:ProductName}}" />
            </td>
        </tr>
        <tr>
            <td>
                Description
            </td>
            <td colspan="3">
                <input id="Description" name="Description" value="{{:Description}}" />
            </td>
        </tr>
        <tr>

            <td>
                Barcode
            </td>
            <td>
                <input id="Barcode" name="Barcode" value="{{:Barcode}}" />
            </td>
            <td>
                UOM
            </td>
            <td>
                <input id="UnitOfMeasureId" name="UnitOfMeasureId" value="{{:UnitOfMeasureId}}" />
            </td>
        </tr>
        <tr>
            <td>
                Default Buying Price
            </td>
            <td>
                <input id="DefaultBuyingPrice" name="DefaultBuyingPrice" value="{{:DefaultBuyingPrice}}" />
            </td>
            <td>
                Default Selling Price
            </td>
            <td>
                <input id="DefaultSellingPrice" name="DefaultSellingPrice" value="{{:DefaultSellingPrice}}" />
            </td>
        </tr>
        <tr>
            <td>
                Branch
            </td>
            <td>
                <input id="BranchId" name="BranchId" value="{{:BranchId}}" />
            </td>
            <td>
                Currency
            </td>
            <td>
                <input id="CurrencyId" name="CurrencyId" value="{{:CurrencyId}}" />
            </td>
        </tr>
        <tr>
            <td>
               
            </td>
            <td>
                
            </td>
            <td>
                Product Type
            </td>
            <td>
                <input id="ProductTypeId" name="ProductTypeId" value="{{:ProductTypeId}}" />
            </td>
        </tr>
    </table>
</script>

@section Styles{

}

@section Scripts{

    <script type="text/javascript">

        var dataManagerUnitOfMeasure;
        var dataManagerBranch;
        var dataManagerCurrency;
        var dataManagerProductType;

        $(function () {

            bindDataFromWebApi();

            var dataManager = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            dataManager.ready.done(function (e) { 
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/Product/Insert",
                        updateUrl: "/api/Product/Update",
                        removeUrl: "/api/Product/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: true,
                        allowDeleting: true,
                        showDeleteConfirmDialog: true,
                        editMode: "dialogtemplate",
                        dialogEditorTemplateID: "#templateForm",
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                    columns: [
                        { field: "ProductId", type: 'number', headerText: 'Product Id', defaultValue: 0, isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "ProductName", type: 'string', headerText: 'Product Name', validationRules: { required: true } },
                        { field: "Description", type: 'string', headerText: 'Description', visible: false },
                        { field: "UnitOfMeasureId", type: 'number', headerText: 'UOM', foreignKeyField: "UnitOfMeasureId", foreignKeyValue: "UnitOfMeasureName", dataSource: dataManagerUnitOfMeasure, validationRules: { required: true } },
                        { field: "Barcode", type: 'string', defaultValue: '1234567891234', headerText: 'Barcode', },
                        { field: "ProductImageUrl", type: 'string', headerText: 'ProductImageUrl', visible: false },
                        { field: "DefaultBuyingPrice", type: 'string', headerText: 'Buying Price', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                        { field: "DefaultSellingPrice", type: 'string', headerText: 'Selling Price', defaultValue: 0, editType: "numericedit", format: "{0:n2}" },
                        { field: "BranchId", type: 'number', headerText: 'Branch', foreignKeyField: "BranchId", foreignKeyValue: "BranchName", dataSource: dataManagerBranch, validationRules: { required: true } },
                        { field: "CurrencyId", type: 'number', headerText: 'Currency', allowEditing: false, foreignKeyField: "CurrencyId", foreignKeyValue: "CurrencyCode", dataSource: dataManagerCurrency, validationRules: { required: true }, visible: false },
                    ],
                    actionComplete: "complete",
                });
            });

            
        });
        

        function complete(args) {

            gridActionNotification(args);

            if (args.requestType == 'beginedit' || args.requestType == 'add') {

                $('#GridBranchId').ejDropDownList({ change: 'branchDdlChange' });

                bindDataFromWebApi();

                formatFormControl();
            }

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
            }
        }

        function formatFormControl() {
            $("#ProductName").ejMaskEdit({
                inputMode: 'Text',
                width: 410,
                validationRules: {required: true},
                validationMessage: { required: 'Product Name is required.' }
            });
            $("#Description").ejMaskEdit({
                inputMode: 'Text',
                width: 410,
            });
            $("#Barcode").ejMaskEdit({
                inputMode: 'Text',
                validationRules: { required: true },
                validationMessage: { required: 'Barcode is required.' }
            });
            $("#UnitOfMeasureId").ejDropDownList({
                dataSource: dataManagerUnitOfMeasure,
                fields: { value: "UnitOfMeasureId", text: "UnitOfMeasureName" },
                validationRules: { required: true },
                validationMessage: { required: 'UOM is required.' }
            });
            $("#BranchId").ejDropDownList({
                dataSource: dataManagerBranch,
                fields: { value: "BranchId", text: "BranchName" },
                validationRules: { required: true },
                validationMessage: { required: 'Branch is required.' },
                change: "branchDdlChange"
            });
            $("#CurrencyId").ejDropDownList({
                dataSource: dataManagerCurrency,
                fields: { value: "CurrencyId", text: "CurrencyCode" },
                validationRules: { required: true },
                validationMessage: { required: 'Currency is required.' },
                enabled: false
            });
            $("#ProductTypeId").ejDropDownList({
                dataSource: dataManagerProductType,
                fields: { value: "ProductTypeId", text: "ProductTypeName" },
                validationRules: { required: true },
                validationMessage: { required: 'Product Type is required.' },
                enabled: true
            });
            $("#DefaultBuyingPrice").ejNumericTextbox({
                format: '{0:n2}',
                validationRules: { required: true },
                validationMessage: { required: 'DefaultBuyingPrice is required.' },
            });
            $("#DefaultSellingPrice").ejNumericTextbox({
                format: '{0:n2}',
                validationRules: { required: true },
                validationMessage: { required: 'DefaultSellingPrice is required.' },
            });
        }


        function branchDdlChange(e) {
            $.ajax({
                url: '/api/Currency/GetByBranchId/' + e.selectedValue,
                type: 'GET',
                success: function (data) {
                    $("#CurrencyId").ejDropDownList({
                        dataSource: [data],
                        fields: { id: 'CurrencyId', text: 'CurrencyCode', value: 'CurrencyId' },
                        value: data.CurrencyId,
                    });
                }
            })
        }

        function bindDataFromWebApi() {
            dataManagerUnitOfMeasure = ej.DataManager({
                url: "/api/UnitOfMeasure",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerBranch = ej.DataManager({
                url: "/api/Branch",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerCurrency = ej.DataManager({
                url: "/api/Currency",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerProductType = ej.DataManager({
                url: "/api/ProductType",
                adaptor: new ej.WebApiAdaptor()
            });

        }


    </script>
}

