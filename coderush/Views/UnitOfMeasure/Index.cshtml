
@{
    ViewData["Title"] = "Unit of Measure";

    ViewBag.HelpTitle = ViewData["Title"];
    ViewBag.HelpMessage1 = "This is the place where you can define Unit of Measeure for your products";
    ViewBag.HelpMessage2 = "";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-gear"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
               
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script id="templateForm" type="text/template">
    <input hidden id="UnitOfMeasureId" name="UnitOfMeasureId" value="{{:UnitOfMeasureId}}" />
    <table cellspacing="10">
        <tr>
            <td>
                UOM
            </td>
            <td colspan="3">
                <input id="UnitOfMeasureName" name="UnitOfMeasureName" value="{{:UnitOfMeasureName}}" />
            </td>
        </tr>
        <tr>
            <td>
                Description
            </td>
            <td colspan="3">
                <input id="Description" name="Description" value="{{:Description}}" />
            </td>
        </tr>
    </table>
</script>

@section Styles{

}

@section Scripts{

<script type="text/javascript">
    $(function () {

        var dataManager = ej.DataManager({
            url: "/api/UnitOfMeasure",
            adaptor: new ej.WebApiAdaptor(),
            offline: true
        });

        dataManager.ready.done(function (e) { 
            $("#Grid").ejGrid({
                dataSource: ej.DataManager({
                    json: e.result,
                    adaptor: new ej.remoteSaveAdaptor(),
                    insertUrl: "/api/UnitOfMeasure/Insert",
                    updateUrl: "/api/UnitOfMeasure/Update",
                    removeUrl: "/api/UnitOfMeasure/Remove",
                }),
                toolbarSettings: {
                    showToolbar: true,
                    toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                },
                editSettings: {
                    allowEditing: true,
                    allowAdding: true,
                    allowDeleting: true,
                    showDeleteConfirmDialog: true,
                    editMode: "dialogtemplate",
                    dialogEditorTemplateID: "#templateForm",
                },
                isResponsive: true,
                enableResponsiveRow: true,
                allowSorting: true,
                allowSearching: true,
                allowFiltering: true,
                filterSettings: {
                    filterType: "excel",
                    maxFilterChoices: 100,
                    enableCaseSensitivity: false
                },
                allowPaging: true,
                pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                columns: [
                    { field: "UnitOfMeasureId", type: 'number', headerText: 'Unit of Measure Id', defaultValue: 0, isPrimaryKey: true, isIdentity: true, visible: false },
                    { field: "UnitOfMeasureName", type: 'string', headerText: 'Unit of Measure Name', validationRules: { required: true } },
                    { field: "Description", type: 'string', headerText: 'Description', },
                ],
                actionComplete: "complete",
            });
        });

        
    });


    function complete(args) {
        gridActionNotification(args);

        if (args.requestType == 'beginedit' || args.requestType == 'add') {
            formatFormControl();
        }

        if (args.requestType == 'beginedit') {
            $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" });
        }

    }

    function formatFormControl() {
        $("#UnitOfMeasureName").ejMaskEdit({
            inputMode: 'Text',
            validationMessage: { required: 'UOM is required.' }
        });

        $("#Description").ejMaskEdit({
            inputMode: 'Text',
            width: 410,
            validationRules: { required: true },
            validationMessage: { required: 'Description is required.' }
        });
    }


</script>
}
