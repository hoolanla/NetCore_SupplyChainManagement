
@{
    ViewData["Title"] = "Shipment";

    ViewBag.HelpTitle = ViewData["Title"];
    ViewBag.HelpMessage1 = "Shipment is a process of delivering goods or service to customer. Usually shipment document is printed and then sent to customer along with the goods to be confirmed by customers.";
    ViewBag.HelpMessage2 = "Reminder: Sales module will allow you to do the sales cycle end to end. Start from: creating Sales Order (SO) document => then products Shipment (DO) to customers => then invoicing the customers => then finally receiving payment from customers.";
}
<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">

    <!-- Main content -->
    <section class="content">
        <!-- Default box -->
        <div class="box">
            <div class="box-header with-border">
                <h3 class="box-title text-primary"><i class="fa fa-truck"></i> @ViewData["Title"]</h3>
                <div class="box-tools pull-right">
                    <button type="button" class="btn btn-box-tool" data-widget="collapse" data-toggle="tooltip"
                            title="Collapse">
                        <i class="fa fa-minus"></i>
                    </button>
                    <button type="button" class="btn btn-box-tool" data-widget="remove" data-toggle="tooltip" title="Remove">
                        <i class="fa fa-times"></i>
                    </button>
                </div>
            </div>
            <div class="box-body">
                <div id="Grid"></div>
            </div>
            <!-- /.box-body -->
            <div class="box-footer">
               
            </div>
            <!-- /.box-footer-->
        </div>
        <!-- /.box -->
    </section>
    <!-- /.content -->
</div>
<!-- /.content-wrapper -->

<script id="templateForm" type="text/template">
    <input hidden id="ShipmentId" name="ShipmentId" value="{{:ShipmentId}}" />
    <table cellspacing="10">
        <tr>
            <td>
                Shipment#
            </td>
            <td>
                <input id="ShipmentName" name="ShipmentName" value="{{:ShipmentName}}" />
            </td>
            <td>
                IsFullShipment
            </td>
            <td>
                <input id="IsFullShipment" name="IsFullShipment" value="{{:IsFullShipment}}" type="checkbox" checked />
            </td>
        </tr>
        <tr>
            <td>
                Sales Order
            </td>
            <td>
                <input id="SalesOrderId" name="SalesOrderId" value="{{:SalesOrderId}}" />
            </td>
            <td>
                Shipment Date
            </td>
            <td>
                <input id="ShipmentDate" name="ShipmentDate" value="{{:ShipmentDate}}" />
            </td>
        </tr>
        <tr>
            <td>
                Shipment Type
            </td>
            <td>
                <input id="ShipmentTypeId" name="ShipmentTypeId" value="{{:ShipmentTypeId}}" />
            </td>
            <td>
                Warehouse
            </td>
            <td>
                <input id="WarehouseId" name="WarehouseId" value="{{:WarehouseId}}" />
            </td>
        </tr>
        <tr>
            <td>
                Remarks
            </td>
            <td colspan="3">
                <input id="Remarks" name="Remarks" value="{{:Remarks}}" />
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <a href="/Shipment/Print/{{:ShipmentId}}" class="btn btn-warning pull-right" target="_blank"><i class="fa fa-print"></i> Print Delivery</a>
            </td>
        </tr>
        <tr>
            <td colspan="4">
                <div id="GridLine"></div>
            </td>
        </tr>
    </table>
</script>

@section Styles{

}

@section Scripts{

    <script type="text/javascript">
        
        var dataManagerSalesOrder;
        var dataManagerWarehouse;
        var dataManagerProduct;

        $(function () {

            bindDataFromWebApi();

            var dataManager = ej.DataManager({
                url: "/api/Shipment",
                adaptor: new ej.WebApiAdaptor(),
                offline: true
            });

            dataManager.ready.done(function (e) { 
                $("#Grid").ejGrid({
                    dataSource: ej.DataManager({
                        json: e.result,
                        adaptor: new ej.remoteSaveAdaptor(),
                        insertUrl: "/api/Shipment/Insert",
                        updateUrl: "/api/Shipment/Update",
                        removeUrl: "/api/Shipment/Remove",
                    }),
                    toolbarSettings: {
                        showToolbar: true,
                        toolbarItems: ["add", "edit", "delete", "update", "cancel", "search", "printGrid"]
                    },
                    editSettings: {
                        allowEditing: true,
                        allowAdding: true,
                        allowDeleting: true,
                        showDeleteConfirmDialog: true,
                        editMode: "dialogtemplate",
                        dialogEditorTemplateID: "#templateForm",
                    },
                    isResponsive: true,
                    enableResponsiveRow: true,
                    allowSorting: true,
                    allowSearching: true,
                    allowFiltering: true,
                    filterSettings: {
                        filterType: "excel",
                        maxFilterChoices: 100,
                        enableCaseSensitivity: false
                    },
                    allowPaging: true,
                    pageSettings: { pageSize: 10, printMode: ej.Grid.PrintMode.CurrentPage },
                    columns: [
                        { headerText: '', width: 50, template: "<a href='/Shipment/Print/{{:ShipmentId}}' target='_blank'><i class='fa fa-print'></i></a>" },
                        { field: "ShipmentId", type: 'number', headerText: 'Shipment', defaultValue: 0, isPrimaryKey: true, isIdentity: true, visible: false },
                        { field: "ShipmentName", type: 'string', headerText: 'Shipment / DO#', allowEditing: false },
                        { field: "IsFullShipment", headerText: 'Full Shipment', allowEditing: false, type: "boolean", editType: "booleanedit", defaultValue: true },
                        { field: "SalesOrderId", type: 'number', headerText: 'SO#', foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, validationRules: { required: true } },
                        { field: "ShipmentDate", type: 'date', headerText: 'Shipment Date', editType: "datepicker", format: "{0:MM/dd/yyyy}", validationRules: { required: true } },
                        { field: "WarehouseId", type: 'number', headerText: 'Warehouse', foreignKeyField: "WarehouseId", foreignKeyValue: "WarehouseName", dataSource: dataManagerWarehouse, validationRules: { required: true } },
                        { field: "Remarks", type: 'string', headerText: 'Remarks', defaultValue: 'No return policy.', visible: false },
                    ],
                    actionComplete: "complete",
                });
            });

            
        });

        function bindDataFromWebApi() {

            dataManagerWarehouse = ej.DataManager({
                url: "/api/Warehouse",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerSalesOrder = ej.DataManager({
                url: "/api/SalesOrder",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerProduct = ej.DataManager({
                url: "/api/Product",
                adaptor: new ej.WebApiAdaptor()
            });

            dataManagerShipmentType = ej.DataManager({
                url: "/api/ShipmentType",
                adaptor: new ej.WebApiAdaptor()
            });
        }

        function complete(args) {

            gridActionNotification(args);

            if (args.requestType == 'beginedit' || args.requestType == 'add') {

                bindDataFromWebApi();

                formatFormControl(args);

                if (args.requestType == 'add') {

                    renderLine(0);

                } else {

                    renderLine(args.rowData.SalesOrderId);

                }
                
            }

            if (args.requestType == 'beginedit') {
                $("#" + this._id + "_dialogEdit").ejDialog({ title: "Edit Record" }); 
            }
 
        }

        function salesOrderDdlChange(e) {
            renderLine(e.selectedValue);            
        }

        function formatFormControl(args) {
            

            $("#ShipmentName").ejMaskEdit({
                inputMode: 'Text',
                enabled: false
            });

            $("#Remarks").ejMaskEdit({
                inputMode: 'Text',
                width: 410,
            });

            $("#IsFullShipment").ejCheckBox({
                enabled: false
            });


            $("#ShipmentDate").ejDatePicker({
                validationRules: { required: true },
                validationMessage: { required: 'Shipment Date is required.' }
            });

            $("#ShipmentTypeId").ejDropDownList({
                dataSource: dataManagerShipmentType,
                fields: { value: "ShipmentTypeId", text: "ShipmentTypeName" },
            });

            $("#SalesOrderId").ejDropDownList({
                dataSource: dataManagerSalesOrder,
                fields: { value: "SalesOrderId", text: "SalesOrderName" },
                validationRules: { required: true },
                validationMessage: { required: 'Sales Order is required.' }
            });
            

            $("#WarehouseId").ejDropDownList({
                dataSource: dataManagerWarehouse,
                fields: { value: "WarehouseId", text: "WarehouseName" },
                validationRules: { required: true },
                validationMessage: { required: 'Warehouse is required.' }
            });
            
            if (args.requestType == 'beginedit' || args.requestType == 'add') {
                var selected = $('#SalesOrderId').data('ejDropDownList');
                var selectedValue = parseInt(selected.option('value'));
                var selectedText = '';

                var query = ej.Query()
                    .select("SalesOrderId", "SalesOrderName");
                
                var execute = dataManagerSalesOrder.executeQuery(query)
                    .done(function (e) { 
                        var selectedObject = e.actual.Items.filter(function (entry) { 
                            return entry.SalesOrderId === selectedValue;
                        });
                        
                        if (selectedObject.length > 0) {
                            selectedText = selectedObject[0].SalesOrderName;
                        }

                        $.ajax({
                            type: 'GET',
                            url: "/api/SalesOrder/GetNotShippedYet",
                            success: function (data) {
                                if (args.requestType == 'beginedit') {
                                    data.push({ 'SalesOrderId': selectedValue, 'SalesOrderName': selectedText });
                                }

                                $("#SalesOrderId").ejDropDownList({
                                    dataSource: data,
                                    change: 'salesOrderDdlChange',
                                    fields: { value: "SalesOrderId", text: "SalesOrderName" },
                                    validationRules: { required: true },
                                    validationMessage: { required: 'Sales Order is required.' },
                                    value: (args.requestType == 'beginedit') ? selectedValue : 0
                                });
                            }
                        });


                    });

                
            }
            
            
        }
        
        function renderLine(id) {

            $.ajax({
                url: '/api/SalesOrderLine',
                headers: { "SalesOrderId": id },
                type: 'GET',
                success: function (data) {
                    
                    $("#GridLine").ejGrid({
                        dataSource: ej.DataManager({
                            json: data.Items,
                            adaptor: new ej.remoteSaveAdaptor(),
                        }),
                        toolbarSettings: {
                            showToolbar: true,
                            toolbarItems: []
                        },
                        editSettings: {
                            allowEditing: false,
                            allowAdding: false,
                            allowDeleting: false,
                        },
                        isResponsive: true,
                        enableResponsiveRow: true,
                        allowSorting: true,
                        allowSearching: false,
                        allowFiltering: false,
                        allowPaging: false,
                        pageSettings: { pageSize: 10 },
                        columns: [
                            { field: "SalesOrderLineId", headerText: 'Line Id', isPrimaryKey: true, isIdentity: true, visible: false },
                            { field: "SalesOrderId", headerText: 'SO#', foreignKeyField: "SalesOrderId", foreignKeyValue: "SalesOrderName", dataSource: dataManagerSalesOrder, visible: false },
                            { field: "ProductId", headerText: 'Product', foreignKeyField: "ProductId", foreignKeyValue: "ProductName", dataSource: dataManagerProduct },
                            { field: "Quantity", headerText: 'Qty', defaultValue: 1, editType: "numericedit", format: "{0:n2}" },
                        ],
                    });
                }
            })
        }

        

    </script>
}

